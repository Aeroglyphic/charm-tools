#!/usr/bin/env python

from __future__ import print_function

import os
import sys
import subprocess


def get_version():
    git_cmd = ['git', 'describe', '--tags', '--long', '--dirty']
    version_filename = os.path.join(os.path.dirname(__file__), '..', 'VERSION')

    try:
        version = subprocess.check_output(git_cmd).strip().split('-')
        if version[0].startswith('v'):
            version[0] = version[0][1:]
    except:
        # git info not available; try to find cached version
        try:
            with open(version_filename, 'r') as fh:
                version = fh.readline().split()[0].split('-')
        except:
            print("Unable to determine version", file=sys.stderr)
            version = ['0.0.0']

    if os.environ.get('SNAPCRAFT_GRADE', 'stable') == 'stable':
        version = version[:1]
    version = '-'.join(version)

    with open(version_filename, 'w') as fh:
        comment = ('cached VERSION for tarballs (i.e., PyPI); '
                   'defers to git tag if available')
        fh.write('{}  # {}\n'.format(version, comment))

    return version


if __name__ == '__main__':
    print(get_version())
